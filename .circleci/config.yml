version: 2.1

executors:

  vm:
    machine:
      image: ubuntu-2404:current
    resource_class: medium
    environment:
      CODENAME: vm
      ARCH: amd64
      DEBIAN_FRONTEND: noninteractive
      SUDO: sudo

  bookworm:
    docker:
      - image: debian:bookworm
    resource_class: large
    environment:
      CODENAME: bookworm
      ARCH: amd64
      DEBIAN_FRONTEND: noninteractive

  trixie:
    docker:
      - image: debian:trixie
    resource_class: large
    environment:
      CODENAME: trixie
      ARCH: amd64
      DEBIAN_FRONTEND: noninteractive

  noble:
    docker:
      - image: ubuntu:noble
    resource_class: large
    environment:
      CODENAME: noble
      ARCH: amd64
      DEBIAN_FRONTEND: noninteractive

  oracular:
    docker:
      - image: ubuntu:oracular
    resource_class: large
    environment:
      CODENAME: oracular
      ARCH: amd64
      DEBIAN_FRONTEND: noninteractive
    
  opensuse-tumbleweed:
    docker:
      - image: registry.opensuse.org/opensuse/tumbleweed
    resource_class: large
    environment:
      CODENAME: opensuse/tumbleweed
      ARCH: x86_64

  fedora-40:
    docker:
      - image: registry.fedoraproject.org/fedora:40
    resource_class: large
    environment:
      CODENAME: fedora/40
      ARCH: x86_64

  fedora-41:
    docker:
      - image: lawmurray/circleci:fedora41
    resource_class: large
    environment:
      CODENAME: fedora/41
      ARCH: x86_64

  vm-arm:
    machine:
      image: ubuntu-2404:current
    resource_class: arm.medium
    environment:
      CODENAME: vm
      ARCH: arm64
      DEBIAN_FRONTEND: noninteractive
      SUDO: sudo

  bookworm-arm:
    docker:
      - image: debian:bookworm
    resource_class: arm.large
    environment:
      CODENAME: bookworm
      ARCH: arm64
      DEBIAN_FRONTEND: noninteractive

  trixie-arm:
    docker:
      - image: debian:trixie
    resource_class: arm.large
    environment:
      CODENAME: trixie
      ARCH: arm64
      DEBIAN_FRONTEND: noninteractive

  noble-arm:
    docker:
      - image: ubuntu:noble
    resource_class: arm.large
    environment:
      CODENAME: noble
      ARCH: arm64
      DEBIAN_FRONTEND: noninteractive

  oracular-arm:
    docker:
      - image: ubuntu:oracular
    resource_class: arm.large
    environment:
      CODENAME: oracular
      ARCH: arm64
      DEBIAN_FRONTEND: noninteractive
    
  opensuse-tumbleweed-arm:
    docker:
      - image: registry.opensuse.org/opensuse/tumbleweed
    resource_class: arm.large
    environment:
      CODENAME: opensuse/tumbleweed
      ARCH: aarch64

  fedora-40-arm:
    docker:
      - image: registry.fedoraproject.org/fedora:40
    resource_class: arm.large
    environment:
      CODENAME: fedora/40
      ARCH: aarch64

  fedora-41-arm:
    docker:
      - image: lawmurray/circleci:fedora41
    resource_class: arm.large
    environment:
      CODENAME: fedora/41
      ARCH: aarch64
    
  mac:
    macos:
      xcode: 16.0.0
    environment:
      CODENAME: mac
      CPATH: /opt/homebrew/include
      LIBRARY_PATH: /opt/homebrew/lib
    
  win:
    machine:
      image: 'windows-server-2022-gui:current'
      shell: powershell.exe -ExecutionPolicy Bypass
    resource_class: windows.medium
    environment:
      CXXFLAGS: /I "c:\ProgramData\chocolatey\include"
      LDFLAGS: /LIBPATH:"c:\ProgramData\chocolatey\lib"
      CMAKE_GENERATOR: Visual Studio 17 2022
      CMAKE_GENERATOR_PLATFORM: x64

commands:

  environment:
    steps:
      - run:
          name: Install dependencies
          command: |
              if [[ "$CODENAME" =~ "mac" ]]; then
                brew update
                brew install \
                    git \
                    gnupg \
                    coreutils \
                    moreutils \
                    make \
                    autoconf \
                    automake \
                    libtool \
                    cmake \
                    flex \
                    bison \
                    libomp \
                    jemalloc \
                    eigen \
                    libyaml \
                    boost \
                    sqlite \
                    cairo \
                    rpm
                echo "export PATH=/opt/homebrew/opt/gnu-time/libexec/gnubin:/opt/homebrew/opt/flex/bin:/opt/homebrew/opt/bison/bin:\$PATH" >> $BASH_ENV
              elif [[ "$CODENAME" =~ "opensuse" ]]; then
                if [[ "$CODENAME" =~ "tumbleweed" ]]; then
                  zypper --non-interactive dup
                else
                  zypper --non-interactive up
                fi
                zypper --non-interactive in \
                  git \
                  openssh \
                  gpg \
                  distribution-gpg-keys \
                  coreutils \
                  moreutils \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  awk \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  meson \
                  flex \
                  bison \
                  gcc \
                  gcc-c++ \
                  blueprint-compiler \
                  gettext \
                  desktop-file-utils \
                  libyaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite3-devel \
                  libicu-devel \
                  glib2-devel \
                  gtk4-devel \
                  libadwaita-devel \
                  libportal-devel \
                  libportal-gtk4-devel \
                  libportal-gtk3-devel \
                  rpmlint \
                  rpm-build \
                  rpm-config-SUSE \
                  createrepo_c
              elif [[ "$CODENAME" =~ "fedora" ]]; then
                dnf -y update
                dnf -y install \
                  git \
                  openssh \
                  gpg \
                  distribution-gpg-keys \
                  coreutils \
                  moreutils \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  meson \
                  flex \
                  bison \
                  gcc \
                  gcc-c++ \
                  blueprint-compiler \
                  gettext \
                  desktop-file-utils \
                  libyaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite-devel \
                  libicu-devel \
                  glib2-devel \
                  gtk4-devel \
                  libadwaita-devel \
                  libportal-devel \
                  libportal-gtk4-devel \
                  libportal-gtk3-devel \
                  rpm \
                  rpmlint \
                  rpm-build \
                  rpm-sign \
                  redhat-rpm-config \
                  createrepo_c
              else  # Debian variant
                $SUDO apt update --assume-yes
                $SUDO apt upgrade --assume-yes
                $SUDO apt install --assume-yes \
                  git \
                  ssh \
                  gpg \
                  gpg-agent \
                  coreutils \
                  moreutils \
                  tar \
                  gzip \
                  xz-utils \
                  curl \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  meson \
                  flex \
                  bison \
                  gcc \
                  g++ \
                  blueprint-compiler \
                  gettext \
                  desktop-file-utils \
                  gdb \
                  libjemalloc-dev \
                  libeigen3-dev \
                  libyaml-dev \
                  libboost-math-dev \
                  libsqlite3-dev \
                  libcairo2-dev \
                  libicu-dev \
                  libgtk-4-dev \
                  libglib2.0-dev \
                  libadwaita-1-dev \
                  libportal-dev \
                  libportal-gtk4-dev \
                  libportal-gtk3-dev \
                  build-essential \
                  apt-utils \
                  dpkg \
                  dpkg-dev \
                  devscripts \
                  libdistro-info-perl \
                  debhelper \
                  fakeroot \
                  lintian \
                  reprepro \
                  rpm \
                  rpmlint \
                  createrepo-c \
                  python3-venv
              fi
      - run:
          name: Environment variables
          command: |
              echo "export PATH=\$HOME/bin:/usr/local/cuda/bin:\$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$HOME/include:/usr/local/cuda/include:\$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$HOME/lib64:\$HOME/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export LIBRARY_PATH=\$HOME/lib64:\$HOME/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LIBRARY_PATH" >> $BASH_ENV
              echo "export JOBS=4" >> $BASH_ENV
      - run:
          name: GPG keys
          command: |
              echo $GPG_PUBLIC_KEY | base32 -d > public.key
              echo $GPG_SIGNING_KEY | base32 -d > signing.key
              echo %_gpg_name $GPG_NAME > ~/.rpmmacros
              unset GPG_PUBLIC_KEY GPG_SIGNING_KEY GPG_NAME
              gpg --import public.key signing.key
              gpg --export --armor > public.key
              rpm --import public.key
              rm public.key signing.key
      - run:
          name: Git identity
          command: |
              git config --global user.name "Birch Machine"
              git config --global user.email "birch-machine@indii.org"

  environment_win:
    steps:
      - run:
          name: Install dependencies
          command: |
            choco install -y cmake.portable nsis.portable sudo checksum
            cd doxide/contrib/libyaml
            mkdir build
            cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=c:/ProgramData/chocolatey
            cmake --build . --config Release
            sudo cmake --install . --config Release

  version:
    description: Update version number
    parameters:
      dir:
        description: Directory in which to update version number
        type: string
    steps:
      - run:
          name: Update version number for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              VERSION_SAFE=$(echo $VERSION | sed -E 's/\./_/g')

              for file in \
                  configure.ac \
                  Makefile.am \
                  Makefile \
                  CMakeLists.txt \
                  *.yml \
                  *.yaml \
                  *.json \
                  *.spec \
                  *.rb \
                  debian/* \
                  choco/*/*.nuspec \
                  PKGBUILD
              do
                if [[ -f $file ]]; then
                  sed -E "s/0\.0\.0/$VERSION/g" $file | sponge $file
                  sed -E "s/0_0_0/$VERSION_SAFE/g" $file | sponge $file
                fi
              done
              for file in debian/*
              do
                if [[ -f $file ]]; then
                  NEWNAME=$(echo $file | sed -E "s/0\.0\.0/$VERSION/g")
                  if [[ "$NEWNAME" != "$file" ]]; then
                    mv $file $NEWNAME
                  fi
                fi
              done

  build_container:
    description: Build container image
    parameters:
      tag:
        description: Container image tag
        type: string
    steps:
      - run:
          name: Build container image
          command: |
            cd .circleci/<< parameters.tag >>
            echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
            TAG="$DOCKERHUB_USERNAME/circleci:<< parameters.tag >>"
            docker build -t $TAG .
            docker push $TAG

  source_autotools:
    description: Archive source for C++ package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --disable-checks --prefix="$HOME" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make dist

  source_birch:
    description: Archive source for Birch package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch bootstrap
              ./configure --disable-checks --prefix="$HOME" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make dist

  source:
    description: Archive source
    parameters:
      dir:
        description: Directory containing the project
        type: string
    steps:
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              TARNAME=$(echo << parameters.dir >> | sed -E 's|^.*/||')
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              cd ..
              mv $TARNAME $TARNAME-$VERSION
              tar --exclude .git -czf $TARNAME-$VERSION.tar.gz $TARNAME-$VERSION
              mv $TARNAME-$VERSION $TARNAME
              mv $TARNAME-$VERSION.tar.gz $TARNAME/.

  build_cpp:
    description: Build a C++ package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --prefix="$HOME" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make -j8
              make install

  package_deb:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build Debian package << parameters.dir >>
          command: |
              cd << parameters.dir >>
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              TARNAME=$(ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]')
              mv $TARNAME-$VERSION.tar.gz ${TARNAME}_$VERSION.orig.tar.gz
              tar xzf ${TARNAME}_$VERSION.orig.tar.gz
              cp -r debian $TARNAME-$VERSION/.
              cd $TARNAME-$VERSION
              rm -rf debian/changelog
              debchange --create \
                  --package $TARNAME \
                  --newversion $VERSION-1 \
                  --distribution $CODENAME \
                  --controlmaint \
                  "Packaged for download.indii.org."
              for file in debian/*; do
                if [[ -f $file ]]; then
                  # add ~$CODENAME to end of version so unique across distributions
                  sed -E "s|$VERSION-1|$VERSION-1~$CODENAME|g" $file | sponge $file
                fi
              done
              debuild -eDEB_BUILD_OPTIONS=noddebs -j$JOBS
      - run:
          name: Install Debian package << parameters.dir >>
          command: |
              cd << parameters.dir >>
              apt-get install -y ./*.deb  # must specify ./ to find packages
      - run:
          name: Move Debian package << parameters.dir >> to directory
          command: |
              cd << parameters.dir >>
              mkdir -p $HOME/pkg/$CODENAME/$ARCH
              mv *.deb $HOME/pkg/$CODENAME/$ARCH/.

  package_rpm:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build RPM package << parameters.dir >>
          command: |
              if [[ '<< parameters.dir >>' =~ 'libraries/Standard' ]]; then
                export JOBS=2
              fi
              cd << parameters.dir >>
              mkdir -p $HOME/rpmbuild/SOURCES
              cp *.tar.gz $HOME/rpmbuild/SOURCES/.
              rpmbuild --target $ARCH --define="_topdir $HOME/rpmbuild" --define="_smp_mflags -j$JOBS" --define="debug_package %{nil}" -ba *.spec
      - run:
          name: Sign RPM package << parameters.dir >>
          command: |
              rpmsign --addsign $HOME/rpmbuild/RPMS/$ARCH/*.rpm
      - run:
          name: Install RPM package << parameters.dir >>
          command: |
              rpm --install --nodeps $HOME/rpmbuild/RPMS/$ARCH/*.rpm
      - run:
          name: Move RPM package << parameters.dir >> to directory
          command: |
              mkdir -p $HOME/rpm/$CODENAME/$ARCH
              mv $HOME/rpmbuild/RPMS/$ARCH/*.rpm $HOME/rpm/$CODENAME/$ARCH/.

              # only one arch should copy the source RPMs in
              #if [[ "$ARCH" =~ 'x86_64' ]]; then
              #  mkdir -p $HOME/rpm/$CODENAME/src
              #  mv $HOME/rpmbuild/SRPMS/*.rpm $HOME/rpm/$CODENAME/src/.
              #fi

  package_mac:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Homebrew package for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              TARNAME=$(ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]')
              SHA256=($(sha256sum $TARNAME-$VERSION.tar.gz))
              sed -E "s/sha256 \"[0-9a-f]+\"/sha256 \"$SHA256\"/g" $TARNAME.rb | sponge $TARNAME.rb
              mkdir -p $HOME/brew
              cp $TARNAME-$VERSION.tar.gz $TARNAME.rb $HOME/brew/.

  package_win:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              mkdir build
              cd build
              cmake ..
              cmake --build . --config Release
              cmake --build . --config Release --target package
              mkdir -p $HOME/win
              cp Release/<< parameters.dir >>.exe $HOME/win/.
              cp << parameters.dir >>-installer.exe  $HOME/win/.
      - run:
          name: Checksum << parameters.dir >>
          command: |
              cd $HOME/win
              checksum -t sha256 << parameters.dir >>.exe > << parameters.dir >>.exe.sha256
              checksum -t sha256 << parameters.dir >>-installer.exe > << parameters.dir >>-installer.exe.sha256
      - run:
          name: Package << parameters.dir >>
          command: |
              function Find-Replace {
                  param($Path, $Find, $Replace)
                  $contents = Get-Content -Path $Path
                  $contents = $contents -replace $Find, $Replace
                  $contents | Set-Content -Path $Path
              }

              cd << parameters.dir >>
              $version=$(git describe --tags --abbrev=0).Substring(1)
              echo $version > $HOME/win/version.txt

              cd choco
              
              cd << parameters.dir >>.portable
              cp $HOME/win/<< parameters.dir >>.exe tools/.
              Find-Replace -Path "tools/chocolateyinstall.ps1" ABCDEF0123456789 $(Get-Content -Path "$HOME/win/<< parameters.dir >>.exe.sha256")
              choco pack --version $version
              cp << parameters.dir >>.portable.$version.nupkg $HOME/win/.
              cd ..

              cd << parameters.dir >>.install
              cp $HOME/win/<< parameters.dir >>-installer.exe tools/.
              Find-Replace -Path "tools/chocolateyinstall.ps1" ABCDEF0123456789 $(Get-Content -Path "$HOME/win/<< parameters.dir >>-installer.exe.sha256")
              choco pack --version $version
              cp << parameters.dir >>.install.$version.nupkg $HOME/win/.
              cd ..

              cd << parameters.dir >>
              choco pack --version $version
              cp << parameters.dir >>.$version.nupkg $HOME/win/.
              cd ..

  deploy_repo:
    parameters:
      subdomain:
        description: Subdomain of repository, e.g. download.indii.org
        type: string
    steps:
      - run:
          name: Deploy << parameters.subdomain >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                git clone https://github.com/lawmurray/download.indii.org
                cd download.indii.org

                # update subdomain
                for file in mkdocs.yaml docs/*.md $HOME/rpm/*/*/*.repo; do
                  sed -E s/download\.indii\.org/<< parameters.subdomain >>/g $file | sponge $file
                done

                # build site
                python3 -m venv venv
                source venv/bin/activate
                pip install mkdocs mkdocs-material mkdocs-material[imaging]
                mkdocs build
                deactivate

                # copy over packages
                cd site
                cp -r $HOME/rpm .
                cp -r $HOME/deb .
                mkdir win && cp -r $HOME/win/*.exe $HOME/win/*.exe.sha256 win/.

                # publish site
                git init -b gh-pages
                git add .
                git commit -m "Overwrite."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.subdomain >>.git
                git push origin gh-pages -f
              fi
      - run:
          name: Wait for CloudFlare build, purge cache, wait again
          command: |
              sleep 150
              curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE/purge_cache" \
                -H "Authorization: Bearer $CLOUDFLARE_TOKEN" \
                -H "Content-Type: application/json" \
                --data '{"purge_everything":true}'
              sleep 60

  deploy_brew:
    parameters:
      repo:
        description: GitHub repo of repository, e.g. homebrew-all
        type: string
    steps:
      - run:
          name: Deploy << parameters.repo >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                mkdir << parameters.repo >>
                cd << parameters.repo >>
                cp -r $HOME/brew/* .
                for file in *.rb; do
                  sed -E "s/homebrew-[A-Z0-9a-z]+/<< parameters.repo >>/g" $file | sponge $file
                done
                git init
                git add .
                git commit -m "Overwrite."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.repo >>.git
                git push origin master -f
              fi

  deploy_choco:
    parameters:
      package:
        description: Name of the package
        type: string
    steps:
      - run:
          name: Deploy Chocolatey package
          command: |
              cd $HOME/win
              $version=$(Get-Content -Path version.txt)
              $choco_version=$(choco search --limit-output --exact doxide).Substring(7)
              echo "Current version is $version, Chocolatey version is $choco_version"
              if ($version -ne $choco_version -And $CHOCO_APIKEY -ne '') {
                echo "Updating"
                choco apikey add --key $env:CHOCO_APIKEY --source https://push.chocolatey.org/
                choco push << parameters.package >>.portable.$version.nupkg --source "https://push.chocolatey.org/"
                choco push << parameters.package >>.install.$version.nupkg --source "https://push.chocolatey.org/"
                choco push << parameters.package >>.$version.nupkg --source "https://push.chocolatey.org/"
              }

  destroy:
    parameters:
      repo:
        description: Name of repository, e.g. stage.indii.org, homebrew-stage
        type: string
      branch:
        description: Branch of repository, e.g. master, gh-pages
        type: string
    steps:
      - run:
          name: Destroy branch << parameters.branch >> of << parameters.repo >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                mkdir << parameters.repo >>
                cd << parameters.repo >>
                git init -b << parameters.branch >>
                git commit --allow-empty -m "Deleted."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.repo >>.git
                git push origin << parameters.branch >> -f
              fi

jobs:

  init:
    executor: noble
    steps:
      - environment
      - checkout
      - run:
          name: Checkout Mending Wall latest tag
          command: |
              git clone https://github.com/lawmurray/mendingwall.git
              cd mendingwall
              git checkout $(git describe --tags --abbrev=0)
      - run:
          name: Checkout Doxide latest tag
          command: |
              git clone https://github.com/lawmurray/doxide.git
              cd doxide
              git checkout $(git describe --tags --abbrev=0)
              git submodule update --init --recursive --depth 1
      - run:
          name: Checkout Birch latest tag
          command: |
              git clone https://github.com/lawmurray/Birch.git
              cd Birch
              git checkout $(git describe --tags --abbrev=0)
      - version:
          dir: mendingwall
      - version:
          dir: doxide
      - version:
          dir: Birch/birch
      - version:
          dir: Birch/membirch
      - version:
          dir: Birch/numbirch
      - version:
          dir: Birch/libraries/Standard
      - version:
          dir: Birch/libraries/Cairo
      - version:
          dir: Birch/libraries/SQLite
      - build_cpp: # needed for source_birch
          dir: Birch/birch
      - source:
          dir: mendingwall
      - source:
          dir: doxide
      - source_autotools:
          dir: Birch/birch
      - source_autotools:
          dir: Birch/membirch
      - source_autotools:
          dir: Birch/numbirch
      - source_birch:
          dir: Birch/libraries/Standard
      - source_birch:
          dir: Birch/libraries/Cairo
      - source_birch:
          dir: Birch/libraries/SQLite
      - persist_to_workspace:
          root: ..
          paths:
            - .

  container:
    parameters:
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - checkout
      - build_container:
          tag: fedora41

  deb:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - attach_workspace:
          at: ..
      - when:
          condition:
            not:
              or:
                - equal: [ << parameters.os >>, bookworm ]
                - equal: [ << parameters.os >>, bookworm-arm ]
          steps:
            - package_deb:
                dir: mendingwall
      - package_deb:
          dir: doxide
      - package_deb:
          dir: Birch/birch
      - package_deb:
          dir: Birch/membirch
      - package_deb:
          dir: Birch/numbirch
      - package_deb:
          dir: Birch/libraries/Standard
      - package_deb:
          dir: Birch/libraries/Cairo
      - package_deb:
          dir: Birch/libraries/SQLite
      - persist_to_workspace:
          root: ..
          paths:
            - pkg

  rpm:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - attach_workspace:
          at: ..
      - package_rpm:
          dir: mendingwall
      - package_rpm:
          dir: doxide
      - package_rpm:
          dir: Birch/birch
      - package_rpm:
          dir: Birch/membirch
      - package_rpm:
          dir: Birch/numbirch
      - package_rpm:
          dir: Birch/libraries/Standard
      - package_rpm:
          dir: Birch/libraries/Cairo
      - package_rpm:
          dir: Birch/libraries/SQLite
      - persist_to_workspace:
          root: ..
          paths:
            - rpm

  mac:
    executor: mac
    steps:
      - environment
      - attach_workspace:
          at: ..
      - package_mac:
          dir: doxide
      - package_mac:
          dir: Birch/birch
      - package_mac:
          dir: Birch/membirch
      - package_mac:
          dir: Birch/numbirch
      - package_mac:
          dir: Birch/libraries/Standard
      - package_mac:
          dir: Birch/libraries/Cairo
      - package_mac:
          dir: Birch/libraries/SQLite
      - persist_to_workspace:
          root: ..
          paths:
            - brew

  win:
    executor: win
    steps:
      - attach_workspace:
          at: ..
      - environment_win
      - package_win:
          dir: doxide
      - persist_to_workspace:
          root: ..
          paths:
            - win

  repo:
    executor: noble
    steps:
      - environment
      - attach_workspace:
          at: ..
      - run:
          name: Debian repository
          command: |
              mkdir -p $HOME/deb
              cp -r conf $HOME/deb/.
              gpg --export --armor > $HOME/deb/Release.key
              cd $HOME/pkg
              for codename in *; do
                find $codename -name *.deb -exec reprepro -b $HOME/deb includedeb $codename '{}' \;
              done
      - run:
          name: RPM repository
          command: |
              cd $HOME/rpm
              for codename in */*; do
                createrepo_c $codename
                gpg --detach-sign --armor $codename/repodata/repomd.xml
                gpg --export --armor > $codename/repodata/repomd.xml.key
                printf "[indii.org]\nname=indii.org\ntype=rpm-md\nbaseurl=https://download.indii.org/rpm/$codename\ngpgcheck=1\ngpgkey=https://download.indii.org/rpm/$codename/repodata/repomd.xml.key\nenabled=1\n" > $codename/indii.org.repo
                if [[ "$codename" =~ "opensuse" ]]; then
                  printf "autorefresh=1\n" >> $codename/indii.org.repo
                fi
              done
      - persist_to_workspace:
          root: ..
          paths:
            - deb
            - rpm

  stage:
    executor: noble
    steps:
      - environment
      - attach_workspace:
          at: ..
      - deploy_repo:
          subdomain: stage.indii.org
      - deploy_brew:
          repo: homebrew-stage

  test_linux:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      # want clean slate to test installation, so do not run usual environment
      # here
      - run:
          name: Environment
          command: |
              if [[ "$CODENAME" =~ "opensuse" ]]; then
                echo "export INSTALL_COMMAND='zypper --non-interactive install --recommends'" >> $BASH_ENV
              elif [[ "$CODENAME" =~ "fedora" ]]; then
                echo "export INSTALL_COMMAND='dnf install --assumeyes mendingwall'" >> $BASH_ENV
              else
                echo "export INSTALL_COMMAND='apt install --assume-yes --install-recommends'" >> $BASH_ENV
              fi
      - run:
          name: Configure repository
          command: |
              if [[ "$CODENAME" =~ "opensuse" ]]; then
                zypper --gpg-auto-import-keys addrepo https://stage.indii.org/rpm/$CODENAME/indii.org.repo
                zypper --gpg-auto-import-keys refresh
                zypper --non-interactive update
              elif [[ "$CODENAME" =~ "fedora/41" ]]; then
                dnf install --assumeyes dnf-plugins-core
                dnf config-manager addrepo --from-repofile=https://stage.indii.org/rpm/$CODENAME/indii.org.repo
                dnf update --assumeyes
              elif [[ "$CODENAME" =~ "fedora" ]]; then
                dnf install --assumeyes dnf-plugins-core
                dnf config-manager --add-repo https://stage.indii.org/rpm/$CODENAME/indii.org.repo
                dnf update --assumeyes
              else
                apt update --assume-yes
                apt upgrade --assume-yes
                apt install --assume-yes curl gpg
                echo "deb https://stage.indii.org/deb $CODENAME main" | tee /etc/apt/sources.list.d/indii.org.list
                curl -fsSL https://stage.indii.org/deb/Release.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/indii.org.gpg > /dev/null
                apt update --assume-yes
              fi
      - when:
          condition:
            not:
              or:
                - equal: [ << parameters.os >>, bookworm ]
                - equal: [ << parameters.os >>, bookworm-arm ]
          steps:
            - run:
                name: Install Mending Wall
                command: |
                    $INSTALL_COMMAND mendingwall
            - run:
                name: Test Mending Wall
                command: |
                    mendingwall -h
                    mendingwalld -h
      - run:
          name: Install Doxide
          command: |
              $INSTALL_COMMAND doxide
      - run:
          name: Test Doxide
          command: |
              mkdir hello
              cd hello
              doxide init
              cd ..
              rm -rf hello
      - run:
          name: Install Birch
          command: |
              $INSTALL_COMMAND birch
      - run:
          name: Test Birch
          command: |
              mkdir hello
              cd hello
              birch init
              birch build
              birch hello
              cd ..
              rm -rf hello

  test_mac:
    executor: mac
    steps:
      # want clean slate to test installation, so do not run environment here
      - run:
          name: Test install
          command: |
              brew tap lawmurray/stage
              brew update
              brew upgrade
              brew install doxide birch
      - run:
          name: Test Doxide
          command: |
            mkdir hello
            cd hello
            doxide init
            cd ..
            rm -rf hello
      - run:
          name: Test Birch
          command: |
            mkdir hello
            cd hello
            birch init
            birch build
            birch hello
            cd ..
            rm -rf hello

  test_win:
    executor: win
    steps:
      # want clean slate to test installation, so do not run environment here
      - attach_workspace:
          at: ..
      - run:
          name: Test Doxide
          command: |
              function Test-Package {
                  param($Package)
                  choco install -y $Package --source .
                  mkdir hello
                  cd hello
                  doxide init
                  cd ..
                  rm hello -Recurse -Force
                  choco uninstall -y $Package
              }

              cd $HOME/win
              Test-Package -Package doxide.portable
              #Test-Package -Package doxide.install
              # ^ hanging
              Test-Package -Package doxide

  deploy_linux:
    executor: noble
    steps:
      - environment
      - attach_workspace:
          at: ..
      - deploy_repo:
          subdomain: download.indii.org
      - destroy:
          repo: stage.indii.org
          branch: gh-pages

  deploy_mac:
    executor: mac
    steps:
      - environment
      - attach_workspace:
          at: ..
      - deploy_brew:
          repo: homebrew-all
      - destroy:
          repo: homebrew-stage
          branch: master

  deploy_win:
    executor: win
    steps:
      - environment_win
      - attach_workspace:
          at: ..
      - deploy_choco:
          package: doxide

workflows:
  all:
    jobs:
      - init
      - container:
          matrix:
            parameters:
              os:
                - vm
                - vm-arm

      - deb:
          matrix:
            parameters:
              os:
                - bookworm
                - trixie
                - noble
                - oracular
                - bookworm-arm
                - trixie-arm
                - noble-arm
                - oracular-arm
          requires:
            - init
            - container

      - rpm:
          matrix:
            parameters:
              os:
                - opensuse-tumbleweed
                - fedora-40
                - fedora-41
                - opensuse-tumbleweed-arm
                - fedora-40-arm
                - fedora-41-arm
          requires:
            - init
            - container

      - mac:
          requires:
            - init

      - win:
          requires:
            - init

      - repo:
          requires:
            - deb: [success, failed]
            - rpm: [success, failed]

      - stage:
          requires:
            - repo
            - mac
            - win

      - test_linux:
          matrix:
            parameters:
              os:
                - bookworm
                - trixie
                - noble
                - oracular
                - opensuse-tumbleweed
                - fedora-40
                - fedora-41
                - bookworm-arm
                - trixie-arm
                - noble-arm
                - oracular-arm
                - opensuse-tumbleweed-arm
                - fedora-40-arm
                - fedora-41-arm
          requires:
            - stage

      - test_mac:
          requires:
            - stage

      - test_win:
          requires:
            - stage

      - hold:
          type: approval
          requires:
            - test_linux: [success, failed]
            - test_mac
            - test_win

      - deploy_linux:
          requires:
            - hold

      - deploy_mac:
          requires:
            - hold

      - deploy_win:
          requires:
            - hold
