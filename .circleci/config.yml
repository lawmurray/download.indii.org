version: 2.1

executors:
  default:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    environment:
      CODENAME: default
      DEBIAN_FRONTEND: noninteractive
      MAKEFLAGS: -j8

  buster:
    docker:
      - image: debian:buster
    resource_class: large
    environment:
      CODENAME: buster
      DEBIAN_FRONTEND: noninteractive

  bullseye:
    docker:
      - image: debian:bullseye
    resource_class: large
    environment:
      CODENAME: bullseye
      DEBIAN_FRONTEND: noninteractive

  bookworm:
    docker:
      - image: debian:bookworm
    resource_class: large
    environment:
      CODENAME: bookworm
      DEBIAN_FRONTEND: noninteractive

  focal:
    docker:
      - image: ubuntu:focal
    resource_class: large
    environment:
      CODENAME: focal
      DEBIAN_FRONTEND: noninteractive

  jammy:
    docker:
      - image: ubuntu:jammy
    resource_class: large
    environment:
      CODENAME: jammy
      DEBIAN_FRONTEND: noninteractive

  kinetic:
    docker:
      - image: ubuntu:kinetic
    resource_class: large
    environment:
      CODENAME: kinetic
      DEBIAN_FRONTEND: noninteractive

  lunar:
    docker:
      - image: ubuntu:lunar
    resource_class: large
    environment:
      CODENAME: lunar
      DEBIAN_FRONTEND: noninteractive

  opensuse-leap-15-4:
    docker:
      - image: registry.opensuse.org/opensuse/leap:15.4
    resource_class: large
    environment:
      CODENAME: opensuse/leap/15.4

  opensuse-leap-15-5:
    docker:
      - image: registry.opensuse.org/opensuse/leap:15.5
    resource_class: large
    environment:
      CODENAME: opensuse/leap/15.5

  opensuse-tumbleweed:
    docker:
      - image: registry.opensuse.org/opensuse/tumbleweed
    resource_class: large
    environment:
      CODENAME: opensuse/tumbleweed

  fedora-35:
    docker:
      - image: registry.fedoraproject.org/fedora:35
    resource_class: large
    environment:
      CODENAME: fedora/35

  fedora-36:
    docker:
      - image: registry.fedoraproject.org/fedora:36
    resource_class: large
    environment:
      CODENAME: fedora/36

  fedora-37:
    docker:
      - image: registry.fedoraproject.org/fedora:37
    resource_class: large
    environment:
      CODENAME: fedora/37

  fedora-38:
    docker:
      - image: registry.fedoraproject.org/fedora:38
    resource_class: large
    environment:
      CODENAME: fedora/38

  mageia-8:
    docker:
      - image: mageia:8
    resource_class: large
    environment:
      CODENAME: mageia/8

  mac:
    macos:
      xcode: 14.2.0
    resource_class: medium
    environment:
      CODENAME: mac

  win:
    machine:
      image: 'windows-server-2022-gui:current'
      shell: powershell.exe -ExecutionPolicy Bypass
    resource_class: windows.medium
    environment:
      CXXFLAGS: /I "c:\ProgramData\chocolatey\include"
      LDFLAGS: /LIBPATH:"c:\ProgramData\chocolatey\lib"
      CMAKE_GENERATOR: Visual Studio 17 2022
      CMAKE_GENERATOR_PLATFORM: x64

commands:

  environment:
    steps:
      - run:
          name: Install dependencies
          command: |
              if [ "$CODENAME" = "default" ]; then
                sudo apt update --assume-yes
                sudo apt upgrade --assume-yes
                sudo apt install --assume-yes --no-install-recommends \
                  git \
                  ssh \
                  gpg \
                  gpg-agent \
                  tar \
                  gzip \
                  xz-utils \
                  curl \
                  time \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  flex \
                  bison \
                  g++ \
                  gdb \
                  lcov \
                  libjemalloc-dev \
                  libeigen3-dev \
                  libyaml-dev \
                  libboost-math-dev \
                  libsqlite3-dev \
                  libcairo2-dev \
                  libicu-dev \
                  build-essential \
                  apt-utils \
                  dpkg \
                  dpkg-dev \
                  devscripts \
                  debhelper \
                  fakeroot \
                  lintian \
                  reprepro \
                  python3 \
                  python3-pip
                pip3 install mkdocs mkdocs-material
                sudo rm -rf /var/lib/apt/lists/*
              elif [[ "$CODENAME" =~ "mac" ]]; then
                brew update
                brew install \
                    git \
                    gnupg \
                    coreutils \
                    make \
                    autoconf \
                    automake \
                    libtool \
                    cmake \
                    flex \
                    bison \
                    libomp \
                    jemalloc \
                    eigen \
                    libyaml \
                    boost \
                    sqlite \
                    cairo
                echo "export PATH=/usr/local/opt/gnu-time/libexec/gnubin:/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:\$PATH" >> $BASH_ENV
              elif [[ "$CODENAME" =~ "opensuse" ]]; then
                zypper --non-interactive update
                zypper --non-interactive install --no-recommends \
                  git \
                  openssh \
                  gpg \
                  distribution-gpg-keys \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  flex \
                  bison \
                  gcc-c++ \
                  libyaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite3-devel \
                  libicu-devel \
                  rpmlint \
                  rpm-build \
                  rpm-config-SUSE \
                  createrepo_c
                zypper clean --all
              elif [[ "$CODENAME" =~ "fedora" ]]; then
                yum -y update
                yum -y install \
                  git \
                  openssh \
                  gpg \
                  distribution-gpg-keys \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  flex \
                  bison \
                  gcc-c++ \
                  libyaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite-devel \
                  libicu-devel \
                  rpm \
                  rpmlint \
                  rpm-build \
                  rpm-sign \
                  redhat-rpm-config \
                  createrepo_c
                yum clean all
              elif [[ "$CODENAME" =~ "mageia" ]]; then
                urpmi --auto-update
                urpmi --force --no-recommends \
                  git \
                  openssh \
                  gnupg2 \
                  distribution-gpg-keys \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  flex \
                  bison \
                  gcc-c++ \
                  yaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite3-devel \
                  libicu-devel \
                  rpm \
                  rpmlint \
                  rpm-build \
                  rpm-sign \
                  rpm-mageia-setup \
                  rpm-mageia-setup-build \
                  createrepo_c
              elif [[ "$CODENAME" =~ "arch" ]]; then
                pacman -Syu --noconfirm --needed \
                  git \
                  openssh \
                  tar \
                  gzip \
                  curl \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  flex \
                  bison \
                  gcc \
                  gdb \
                  jemalloc \
                  libyaml \
                  boost \
                  eigen \
                  cairo \
                  sqlite \
                  icu
                pacman -Sc --noconfirm
              else  # Debian variant
                apt update --assume-yes
                apt upgrade --assume-yes
                apt install --assume-yes --no-install-recommends \
                  git \
                  ssh \
                  gpg \
                  gpg-agent \
                  tar \
                  gzip \
                  curl \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  cmake \
                  flex \
                  bison \
                  g++ \
                  gdb \
                  libjemalloc-dev \
                  libeigen3-dev \
                  libyaml-dev \
                  libboost-math-dev \
                  libsqlite3-dev \
                  libcairo2-dev \
                  libicu-dev \
                  build-essential \
                  apt-utils \
                  dpkg \
                  dpkg-dev \
                  devscripts \
                  debhelper \
                  fakeroot \
                  lintian \
                  reprepro
                rm -rf /var/lib/apt/lists/*
              fi
      - run:
          name: Environment variables
          command: |
              echo "export PATH=\$HOME/bin:/usr/local/cuda/bin:\$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$HOME/include:/usr/local/cuda/include:\$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$HOME/lib64:\$HOME/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export LIBRARY_PATH=\$HOME/lib64:\$HOME/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LIBRARY_PATH" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV
      - run:
          name: GPG keys
          command: |
              echo $GPG_PUBLIC_KEY | base32 -d > public.key
              echo $GPG_SIGNING_KEY | base32 -d > signing.key
              echo %_gpg_name $GPG_NAME > ~/.rpmmacros
              unset GPG_PUBLIC_KEY GPG_SIGNING_KEY GPG_NAME
              gpg --import public.key signing.key
              rm public.key signing.key
      - run:
          name: Git identity
          command: |
              git config --global user.name "Birch Machine"
              git config --global user.email "birch-machine@indii.org"

  environment_win:
    environment:
    steps:
      - run:
          name: Install dependencies
          command: |
            choco install -y cmake.portable nsis.portable sudo
            cd doxide\contrib\libyaml
            mkdir build
            cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=c:\ProgramData\chocolatey
            cmake --build . --config Release
            sudo cmake --install . --config Release

  install_cuda_prereq:
    steps:
      - run:
          name: Install prerequisites for NumBirch CUDA backend
          command: cd Birch/numbirch && ./install_cuda_prereq

  end_if_pull_request:
    steps:
      - run: 
         name: End early if pull request
         command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              circleci step halt
            fi

  checkout:
    description: Checkout code from Git
    steps:
      - run:
          name: Checkout Doxide latest tag
          command: |
              git clone https://github.com/lawmurray/doxide.git
              cd doxide
              git checkout $(git describe --tags --abbrev=0)
              git submodule update --init --recursive --depth 1
      - run:
          name: Checkout Birch latest tag
          command: |
              git clone https://github.com/lawmurray/Birch.git
              cd Birch
              git checkout $(git describe --tags --abbrev=0)

  version:
    description: Update version number
    parameters:
      dir:
        description: Directory in which to update version number
        type: string
    steps:
      - run:
          name: Update version number for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              VERSION_SAFE=$(echo $VERSION | sed -E 's/\./_/g')

              for file in configure.ac Makefile.am Makefile CMakeLists.txt *.yml *.yaml *.json *.spec *.rb PKGBUILD; do
                if [[ -e $file ]]; then
                  cat $file | sed -E "s/0\.0\.0/$VERSION/g" | sed -E "s/0_0_0/$VERSION_SAFE/g" > $file.sponge
                  mv $file.sponge $file
                fi
              done
              for file in debian/changelog debian/control debian/*.install debian/*.links; do
                if [[ -e $file ]]; then
                  cat $file | sed -E "s|0\.0\.0-1|$VERSION-1~$CODENAME|g" | sed -E "s/0\.0\.0/$VERSION/g" | sed -E "s/0_0_0/$VERSION_SAFE/g" > $file.sponge
                  mv $file.sponge $file
                  NEWNAME=$(echo $file | sed -E "s/0\.0\.0/$VERSION/g")
                  if [[ "$NEWNAME" != "$file" ]]; then
                    mv $file $NEWNAME
                  fi
                fi
              done

  version_win:
    description: Update version number
    parameters:
      dir:
        description: Directory in which to update version number
        type: string
    steps:
      - run:
          name: Update version number for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              $version=$(git describe --tags --abbrev=0).Substring(1)
              $contents = Get-Content -Path CMakeLists.txt
              $contents = $contents -replace '0.0.0', $version
              $contents | Set-Content -Path CMakeLists.txt

  prepare:
    steps:
      - version:
          dir: doxide
      - version:
          dir: Birch/birch
      - version:
          dir: Birch/membirch
      - version:
          dir: Birch/numbirch
      - version:
          dir: Birch/libraries/Standard
      - version:
          dir: Birch/libraries/Cairo
      - version:
          dir: Birch/libraries/SQLite

      # build birch, needed for source_birch and docs_birch
      - build_cpp:
          dir: Birch/birch

      - source_cmake:
          dir: doxide
      - source_cpp:
          dir: Birch/birch
      - source_cpp:
          dir: Birch/membirch
      - source_cpp:
          dir: Birch/numbirch
      - source_birch:
          dir: Birch/libraries/Standard
      - source_birch:
          dir: Birch/libraries/Cairo
      - source_birch:
          dir: Birch/libraries/SQLite

  prepare_win:
    steps:
      - version_win:
          dir: doxide

  source_cpp:
    description: Archive source for C++ package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --disable-checks --prefix="$HOME" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make dist

  source_birch:
    description: Archive source for Birch package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch bootstrap
              ./configure --disable-checks --prefix="$HOME" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make dist

  source_cmake:
    description: Archive source for CMake package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              TARNAME=$(echo << parameters.dir >> | sed -E 's|^.*/||')
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              mkdir $TARNAME-$VERSION
              cp -r src contrib CMakeLists.txt README.md LICENSE $TARNAME-$VERSION/.
              tar czf $TARNAME-$VERSION.tar.gz $TARNAME-$VERSION
              rm -rf $TARNAME-$VERSION

  build_cpp:
    description: Build a C++ package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --prefix="$HOME" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make install

  docs_birch:
    description: Document Birch package
    parameters:
      dir:
        description: Directory containing the package, without Birch/ prefix
        type: string
    steps:
      - run:
          name: Document Birch/<< parameters.dir >>
          command: |
              cd Birch/<< parameters.dir >>
              birch docs
              mkdir -p $HOME/docs/docs/<< parameters.dir >>
              cp -r docs/* $_/.

  package_deb:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build Debian package << parameters.dir >>
          command: |
              if [[ '<< parameters.dir >>' =~ 'libraries/Standard' ]]; then
                export JOBS=2  # high memory use in single thread
              elif [[ '<< parameters.dir >>' =~ 'numbirch' ]]; then
                export JOBS=6
              else
                export JOBS=8
              fi
              cd << parameters.dir >>
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              TARNAME=$(ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]')
              mv $TARNAME-$VERSION.tar.gz ${TARNAME}_$VERSION.orig.tar.gz
              tar xzf ${TARNAME}_$VERSION.orig.tar.gz
              cp -r debian $TARNAME-$VERSION/.
              cd $TARNAME-$VERSION
              debuild -eDEB_BUILD_OPTIONS=noddebs -j$JOBS
      - run:
          name: Install Debian package << parameters.dir >>
          command: |
              cd << parameters.dir >>
              apt-get install -y ./*.deb  # must specify ./ to find packages
      - run:
          name: Deploy Debian package << parameters.dir >>
          command: |
              cd << parameters.dir >>
              reprepro -b $HOME/deb/$CODENAME --ignore=wrongdistribution include $CODENAME *.changes

  package_rpm:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build RPM package << parameters.dir >>
          command: |
              if [[ '<< parameters.dir >>' =~ 'libraries/Standard' ]]; then
                export JOBS=2  # high memory use in single thread
              elif [[ '<< parameters.dir >>' =~ 'numbirch' ]]; then
                export JOBS=6
              else
                export JOBS=8
              fi
              cd << parameters.dir >>
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              TARNAME=$(ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]')
              mkdir -p $HOME/rpmbuild/SOURCES
              mv $TARNAME-$VERSION.tar.gz $_/.
              rpmbuild --define="_topdir $HOME/rpmbuild" --define="_smp_mflags -j$JOBS" --define="debug_package %{nil}" -ba $TARNAME.spec
      - run:
          name: Sign RPM package << parameters.dir >>
          command: |
              rpmsign --addsign $HOME/rpmbuild/RPMS/x86_64/*.rpm
      - run:
          name: Install RPM package << parameters.dir >>
          command: |
              rpm --install --nodeps $HOME/rpmbuild/RPMS/x86_64/*.rpm  # establish dependencies as we go
      - run:
          name: Deploy RPM package << parameters.dir >>
          command: |
              mv $HOME/rpmbuild/RPMS/x86_64/*.rpm $HOME/rpm/$CODENAME/x86_64/.
              mv $HOME/rpmbuild/SRPMS/*.rpm $HOME/rpm/$CODENAME/src/.

  package_mac:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Homebrew package for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              VERSION=$(git describe --tags --abbrev=0 | sed -E 's/^v//')
              TARNAME=$(ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]')
              SHA256=($(sha256sum $TARNAME-$VERSION.tar.gz))
              cat $TARNAME.rb | sed -E "s/sha256 \"[0-9a-f]+\"/sha256 \"$SHA256\"/g" > $TARNAME.rb.sponge
              mv $TARNAME.rb.sponge $TARNAME.rb
              mv $TARNAME-$VERSION.tar.gz $TARNAME.rb $HOME/brew/.

  package_win:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Installer for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              mkdir build
              cd build
              cmake ..
              cmake --build . --config Release
              cmake --build . --config Release --target package
              cp *.exe $HOME\win\.
              cp Release\*.exe $HOME\win\.

  deploy:
    parameters:
      subdomain:
        description: Subdomain of repository, e.g. download.indii.org
        type: string
    steps:
      - run:
          name: Deploy << parameters.subdomain >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                git clone https://github.com/lawmurray/download.indii.org
                cd download.indii.org

                # finalize front page (update subdomain)
                for file in $(ls mkdocs.yaml docs/*.md); do
                  cat $file | sed s/download\.indii\.org/<< parameters.subdomain >>/g > $file.sponge
                  mv $file.sponge $file
                done
                mkdocs build

                # copy over packages
                cd site
                mkdir rpm && cp -r $HOME/rpm/* rpm/.
                mkdir deb && cp -r $HOME/deb/*/* deb/.  # merge Debian repos
                mkdir win && cp -r $HOME/win/* win/.

                # finalize apt repo (add key)
                gpg --export --armor > deb/Release.key

                # finalize rpm repos (add .repo file to each)
                for codename in $(ls rpm/*/*/repodata/repomd.xml rpm/*/*/*/repodata/repomd.xml | sed -E 's|^rpm/||' | sed -E 's|/repodata/repomd.xml$||'); do
                  printf "[indii.org]\nname=indii.org\ntype=rpm-md\nbaseurl=https://<< parameters.subdomain >>/rpm/$codename\ngpgcheck=1\ngpgkey=https://<< parameters.subdomain >>/rpm/$codename/repodata/repomd.xml.key\nenabled=1\nautorefresh=1\n" > rpm/$codename/indii.org.repo
                done

                # publish
                git init -b gh-pages
                git add .
                git commit -m "Overwrite."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.subdomain >>.git
                git push origin gh-pages -f
              fi
      - run:
          name: Wait for CloudFlare build, purge cache, wait again
          command: |
              sleep 150
              curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE/purge_cache" \
                -H "Authorization: Bearer $CLOUDFLARE_TOKEN" \
                -H "Content-Type: application/json" \
                --data '{"purge_everything":true}'
              sleep 60

  deploy_mac:
      parameters:
        repo:
          description: GitHub repo of repository, e.g. homebrew-all
          type: string
      steps:
        - run:
            name: Deploy << parameters.repo >>
            command: |
                if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                  mkdir << parameters.repo >>
                  cd << parameters.repo >>
                  cp -r $HOME/brew/* .
                  for file in *.rb; do
                    cat $file | sed -E "s/homebrew-[A-Z0-9a-z]+/<< parameters.repo >>/g" > $file.sponge
                    mv $file.sponge $file
                  done
                  git init
                  git add .
                  git commit -m "Overwrite."
                  git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.repo >>.git
                  git push origin master -f
                fi

  deploy_docs:
    parameters:
      subdomain:
        description: Subdomain of repository, e.g. docs.birch.sh
        type: string
    steps:
      - run:
          name: Deploy << parameters.subdomain >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                pip3 install mkdocs mkdocs-material
                cd $HOME/docs
                mkdocs build
                cd site
                git init -b gh-pages
                git add .
                git commit -m "Overwrite."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.subdomain >>.git
                git push origin gh-pages -f
              fi

  destroy:
    parameters:
      repo:
        description: Name of repository, e.g. stage.indii.org, homebrew-stage
        type: string
      branch:
        description: Branch of repository, e.g. master, gh-pages
        type: string
    steps:
      - run:
          name: Destroy branch << parameters.branch >> of << parameters.repo >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                mkdir << parameters.repo >>
                cd << parameters.repo >>
                git init -b << parameters.branch >>
                git commit --allow-empty -m "Deleted."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.repo >>.git
                git push origin << parameters.branch >> -f
              fi

jobs:

  deb:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - checkout
      - prepare

      - run:
          name: Initialize repository
          command: |
              mkdir -p $HOME/deb/$CODENAME/conf
              printf "Codename: $CODENAME\nSuite: stable\nComponents: main\nArchitectures: source amd64\nSignWith: default\n" > $_/distributions
      - package_deb:
          dir: doxide
      - package_deb:
          dir: Birch/birch
      - package_deb:
          dir: Birch/membirch
      - install_cuda_prereq
      - package_deb:
          dir: Birch/numbirch
      - package_deb:
          dir: Birch/libraries/Standard
      - package_deb:
          dir: Birch/libraries/Cairo
      - package_deb:
          dir: Birch/libraries/SQLite
      - run:
          name: Remove unnecessary files
          command: |
              rm -rf $HOME/deb/$CODENAME/{conf,db}
      - persist_to_workspace:
          root: ..
          paths:
            - deb

  rpm:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - checkout
      - prepare

      - run:
          name: Initialize repository
          command: |
              mkdir -p $HOME/rpm/$CODENAME/{x86_64,src}
              gpg --export --armor > public.key
              rpm --import public.key
              rm public.key
      - package_rpm:
          dir: doxide
      - package_rpm:
          dir: Birch/birch
      - package_rpm:
          dir: Birch/membirch
      - install_cuda_prereq
      - package_rpm:
          dir: Birch/numbirch
      - package_rpm:
          dir: Birch/libraries/Standard
      - package_rpm:
          dir: Birch/libraries/Cairo
      - package_rpm:
          dir: Birch/libraries/SQLite
      - run:
          name: Finalize repository
          command: |
              cd $HOME/rpm/$CODENAME
              createrepo .
              gpg --detach-sign --armor repodata/repomd.xml
              gpg --export --armor > repodata/repomd.xml.key
      - persist_to_workspace:
          root: ..
          paths:
            - rpm

  mac:
    executor: mac
    steps:
      - environment
      - checkout
      - prepare

      - run:
          name: Initialize repository
          command: |
              mkdir -p $HOME/brew
      - package_mac:
          dir: doxide
      - package_mac:
          dir: Birch/birch
      - package_mac:
          dir: Birch/membirch
      - package_mac:
          dir: Birch/numbirch
      - package_mac:
          dir: Birch/libraries/Standard
      - package_mac:
          dir: Birch/libraries/Cairo
      - package_mac:
          dir: Birch/libraries/SQLite

      # stage now
      - deploy_mac:
          repo: homebrew-stage

      - persist_to_workspace:
          root: ..
          paths:
            - brew

  win:
    executor: win
    steps:
      - checkout  # required for environment_win
      - environment_win
      - prepare_win

      - run:
          name: Initialize repository
          command: |
              mkdir -p $HOME/win
      - package_win:
          dir: doxide

      - persist_to_workspace:
          root: ..
          paths:
            - win

  docs:
    executor: default
    steps:
      - environment
      - checkout
      - prepare
      - run:
          name: Initialize docs
          command: |
              mkdir -p $HOME/docs/docs
      - docs_birch:
          dir: libraries/Standard
      - docs_birch:
          dir: libraries/Cairo
      - docs_birch:
          dir: libraries/SQLite
      - run:
          name: Finalize docs
          command: |
              cp Birch/mkdocs.yml $HOME/docs/.
              cp Birch/README.md $HOME/docs/docs/index.md

      - persist_to_workspace:
          root: ..
          paths:
            - docs

  stage:
    executor: default
    steps:
      - end_if_pull_request
      - environment
      - attach_workspace:
          at: ..
      - deploy:
          subdomain: stage.indii.org

  test:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      # want clean slate to test installation, so do not run environment here
      - end_if_pull_request
      - run:
          name: Test install
          command: |
              if [[ "$CODENAME" =~ "opensuse" ]]; then
                zypper --gpg-auto-import-keys addrepo https://stage.indii.org/rpm/$CODENAME/indii.org.repo
                zypper --gpg-auto-import-keys refresh
                zypper --non-interactive update
                zypper --non-interactive install --recommends doxide birch
              elif [[ "$CODENAME" =~ "fedora" || "$CODENAME" =~ "mageia" ]]; then
                dnf install --assumeyes dnf-plugins-core
                dnf config-manager --add-repo https://stage.indii.org/rpm/$CODENAME/indii.org.repo
                dnf update --assumeyes
                dnf install --assumeyes doxide birch
              elif [[ "$CODENAME" =~ "mac" ]]; then
                brew tap lawmurray/stage
                brew update
                brew upgrade
                brew install doxide birch
              else
                apt update --assume-yes
                apt upgrade --assume-yes
                apt install --assume-yes curl gpg
                echo "deb https://stage.indii.org/deb $CODENAME main" | tee /etc/apt/sources.list.d/indii.org.list
                curl -fsSL https://stage.indii.org/deb/Release.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/indii.org.gpg > /dev/null
                apt update --assume-yes
                apt install --assume-yes --install-recommends doxide birch
              fi
      - run:
          name: Test Doxide
          command: |
            mkdir hello
            cd hello
            doxide init
            cd ..
            rm -rf hello
      - run:
          name: Test Birch
          command: |
            mkdir hello
            cd hello
            birch init
            birch build
            birch hello
            cd ..
            rm -rf hello

  deploy:
    executor: default
    steps:
      - end_if_pull_request
      - environment
      - attach_workspace:
          at: ..
      - deploy:
          subdomain: download.indii.org
      - deploy_mac:
          repo: homebrew-all
      - deploy_docs:
          subdomain: docs.birch.sh
      - destroy:
          repo: stage.indii.org
          branch: gh-pages
      - destroy:
          repo: homebrew-stage
          branch: master

workflows:
  all:
    jobs:
      - deb:
          matrix:
            parameters:
              os:
                #- buster
                - bullseye
                - bookworm
                - focal
                - jammy
                - kinetic
                - lunar

      - rpm:
          matrix:
            parameters:
              os:
                - opensuse-tumbleweed
                - fedora-35
                - fedora-36
                - fedora-37
                - fedora-38
                - mageia-8

      - mac
      - win

      - test:
          matrix:
            alias: test_mac
            parameters:
              os:
                - mac
          requires:
            - mac

      - stage:
          requires:
            - deb
            - rpm
            - win

      - test:
          matrix:
            alias: test_linux
            parameters:
              os:
                - bullseye
                - bookworm
                - focal
                - jammy
                - kinetic
                - lunar
                - opensuse-tumbleweed
                - fedora-35
                - fedora-36
                - fedora-37
                - fedora-38
                - mageia-8
          requires:
            - stage

      - hold:
          type: approval
          requires:
            - test_mac
            - test_linux

      - deploy:
          requires:
            - hold
